; All possible instructions

;; CROS    <api function>          | Call ROS-API
cros 1
cros 223h

;; RET                             | Return from procedure
ret

;; CLS                             | Clear screen
cls

;; GOTO    <imm12>/<V0 + imm12>    | Direct jump
goto 1
goto 0BADh

;; CALL    <imm12>                 | Call procedure
call 69h
call 900

;; SE      <reg8>, <reg8>/<imm8>   | Skip next if equal
se v5, va
se v5, 69h

;; SNE     <reg8>, <reg8>/<imm8>   | Skip next if not equal
sne v5, vf
sne vf, 18h

;; SET*    <dst8>/<dst12>/delay, <reg8>/<imm8>/<reg8 - dst8>/<imm12>/delay/key
;;                                | Set register value ( VF is affected in case of <reg8 - dst8> )
set v0, v3
set v0, 33h
set v0, delay
set vf, key
set delay, vF
set I, 0AAAh

;; ADD^    <reg8>/<reg12>, <reg8>/<imm8>   | Add operation
add v0, 10h
add v0, vf

;; OR*     <reg8>, <reg8>/<imm8>   | Or operation ( Assembler uses Vf register as temporary, in case of <imm8> )
or v5, v5
or v1, 55h

;; AND*    <reg8>, <reg8>/<imm8>   | And operation ( Assembler uses Vf register as temporary, in case of <imm8> )
and v5, v7
and vF, 69h

;; XOR*    <reg8>, <reg8>/<imm8>   | Xor operation ( Assembler uses Vf register as temporary, in case of <imm8> )
xor v4, vc
xor VE, 78

;; SUB^    <reg8>, <reg8>/<imm8>   | Sub operation ( Assembler uses Vf register as temporary, in case of <imm8> )
sub v6, v1
sub v6, 78h

;; SHR^    <reg8>                  | Right binary shift
shr vf

;; SHL^    <reg8>                  | Left binary shift
shl V7

;; RND     <reg8>, <imm8>          | Get random value masked by immidiate value
rnd v5, 0ffh

;; BCD     <reg8>                  | BCD representation
bcd VD

;; DUMP    V0, <reg8>              | Dump registers to I
dump v0, v0

;; LOAD    V0, <reg8>              | Load registers from I
load v0, v6
